
The integer passed to the constructor represents its initial capacity, i.e., the number of elements it can hold before it needs to resize its internal array (and has nothing to do with the initial number of elements in the list).

To initialize an list with 60 zeros you do:

List<Integer> list = new ArrayList<Integer>(Collections.nCopies(60, 0));

String data = "Hello, World!";
int nameLength = data.length(); // 13


String[] myArray = { "I", "Love", "Music" };
int arrayLength = myArray.length; 

    //Creating ArrayList  
    ArrayList<String> list=new ArrayList<String>();  
    //storing 2 elements  
    list.add("ankit");  
    list.add("nippun");  
    //printing size of ArrayList  
    System.out.println(list.size());//2  


 Character.isAlphabetic()-> to check whether a character is an alphabet or not 

 *BufferedReader is Synchronous while scanner is not .BufferedReader should be use when we are working with
 several Threads
 *BufferedReader has larger buffer memory than scanner
 *BufferReader is more faster than scanner
 

 **Checkout Arrays.fill() method on "https://www.geeksforgeeks.org/arrays-fill-java-examples/" link

    **Arrays.toString(arrayname);
    Returns a string representation of the contents of the specified array. The string representation consists of a list of the array’s elements, enclosed in square brackets (“[]”). Adjacent elements are separated by the characters “, ” (a comma followed by a space). Returns “null” if a is null.

In case of an Object Array, if the array contains other arrays as elements, they are converted to strings by the Object.toString() method inherited from Object, which describes their identities rather than their contents.